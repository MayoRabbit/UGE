/*******************************************************************************

<one line to give the program's name and a brief idea of what it does.>
Copyright (C) <year>  <name of author>

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.
This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <https://www.gnu.org/licenses/>.

********************************************************************************

config.cpp

Handles configuration files. Any number of these files may be stored and used by
a program using these libraries. Files are stored in the "config" directory, and
the default "config.cfg" is loaded at program start (if available) and saved on
program's end. During runtime, files may be created and read by using the
"cfg_save" and "cfg_load" commands in console, specifying a different filename.

*******************************************************************************/

#include <SDL2/SDL.h>
#include "console.hpp"
#include "config.hpp"

namespace coreLib
{

namespace config
{

// Config directory.
const std::filesystem::path				CFGFile::cfgDirPath("./config");
const std::filesystem::directory_entry	CFGFile::cfgDirectory(CFGFile::cfgDirPath);

// Default configuration file.
static CFGFile defaultCFGFile("config.cfg");

// CVAR string format.
static const std::regex cvarFormat("^\\s*([a-zA-Z_]+)\\s+([\\d.]+)\\s*&", std::regex_constants::icase);

/**
 * Configuration File.
 */

// Constructor.
CFGFile::CFGFile(const std::string_view &filename)
{
	cfgFilePath.assign(cfgDirPath.string() + "/" + filename.data());
}

// Destructor.

/**
 * Loads configuration file.
 */

void CFGFile::load()
{
	cfgFile.open(cfgFilePath.string(), std::ios::in);
	if(!cfgFile.is_open())
	{
		return;
	}

	std::string line;
	std::smatch matches;

	while(std::getline(cfgFile, line))
	{
		std::regex_match(line, matches, cvarFormat);

		// There should be three matches. One for the string and two for the
		// submatches (CVAR name and value).
		if(matches.size() != 3)
		{

		}

		// CVAR seems good. Attempt to apply it. Up to the CVAR whether or not
		// this happens.
		std::string_view
			name	= matches[1].str().c_str(),
			value	= matches[2].str().c_str();

		(*console::systemCVARs[name]) = value;
	}

	cfgFile.close();
}

/**
 * Saves configuration file.
 */

void CFGFile::save()
{
	cfgFile.open(cfgFilePath.string(), std::ios::out);
	if(!cfgFile.is_open())
	{
		printf("NO CFG FILE TO SAVE!");
		return;
	}

	cfgFile << "# Configuration file ''\n# Do not edit this file!\n";

	for(auto &[name, cv] : console::systemCVARs)
		cfgFile << "\n" << name << " " << cv->value;

	cfgFile.close();
}

/**
 * Initializes the configuration system. Checks that the directory for config
 * files and the default file exist; tries to creates them if they don't. For
 * every console variable in the file, simply sets its value. The initializing
 * functions for each system will test the values, and if invalid, or one has
 * not been set, will set it to default.
 *
 * Neither the config directory or the default config file are absolutely
 * required. If either cannot be created or used, all defaults will be used. If
 * a default config file is found, any settings it has will attempt to be used.
 */

uint8_t init()
{
	if(!CFGFile::cfgDirectory.exists())
	{
		if(!std::filesystem::create_directory(CFGFile::cfgDirPath))
		{

		}
	}

	// If we can't open the default config file, then simply use defaults for
	// all settings.
	if(!defaultCFGFile)
	{
		return 2;
	}

	defaultCFGFile.cfgFile.open(defaultCFGFile.cfgFilePath.string(), std::ios::in);
	if(!defaultCFGFile.cfgFile.is_open())
	{
		 return 3;
	}

	std::string line;
	std::smatch matches;

	while(std::getline(defaultCFGFile.cfgFile, line))
	{
		std::regex_match(line, matches, cvarFormat);

		// There should be three matches. One for the string and two for the
		// submatches (CVAR name and value).
		if(matches.size() != 3)
		{

		}

		// CVAR seems good. Attempt to apply it. Up to the CVAR whether or not
		// this happens.
		std::string_view
			name	= matches[1].str().c_str(),
			value	= matches[2].str().c_str();

		(*console::systemCVARs[name]).value = value;
	}

	defaultCFGFile.cfgFile.close();

	for(auto &[name, cv] : console::systemCVARs)
		if(cv->value.empty())
			cv->value = cv->defaultValue;

	return 0;
}

void quit()
{
	defaultCFGFile.save();
}

} // namespace config

} // namespace coreLib
