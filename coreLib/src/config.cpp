/*******************************************************************************

<one line to give the program's name and a brief idea of what it does.>
Copyright (C) 2022-2023  <name of author>

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.
This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <https://www.gnu.org/licenses/>.

********************************************************************************

config.cpp

Handles configuration files. Any number of these files may be stored and used by
a program using these libraries. Files are stored in the "config" directory, and
the default "config.cfg" is loaded at program start (if available) and saved on
program's end. During runtime, files may be created and read by using the
"cfg_save" and "cfg_load" commands in console, specifying a different filename.

*******************************************************************************/

#include <regex>
#include "config.hpp"
#include "console.hpp"

namespace coreLib
{

namespace configuration
{

// Directory config files are stored in. Default is "./config".
static const std::filesystem::path				cfgDirPath("./config");
static const std::filesystem::directory_entry	cfgDirectory;

// Default configuration file. This is loaded on program start and saved on
// program close.
static const CFGFile defaultCFGFile("config.cfg");

/**
 * Configuration File.
 */

// Constructor.
CFGFile::CFGFile(const std::string_view &filename)
{
	cfgFilePath.assign(cfgDirPath.string() + "/" + filename.data());
}

// Move constructor.
CFGFile::CFGFile(CFGFile &&f)
{
	cfgFilePath = std::move(f.cfgFilePath);
	cfgFile		= std::move(f.cfgFile);
}

// Move assignment.
CFGFile & CFGFile::operator = (CFGFile &&f)
{
	cfgFilePath = std::move(f.cfgFilePath);
	cfgFile		= std::move(f.cfgFile);
	return *this;
}

/**
 * Attempts to load a configuration file. If the file cannot be loaded, displays
 * an error, and simply stops.
 */

void CFGFile::load()
{
	cfgFile.open(cfgFilePath.string(), std::ios::in);
	if(!cfgFile.is_open())
	{

	}

	// Each line in the configuration file will be one of these.
	enum
	{
		LT_INVALID,	// Neither comment or CVAR, ignored and warning displayed.
		LT_COMMENT,	// Comments start with "#". Ignored.
		LT_CVAR		// CVAR setting.
	}
	lineType;

	// Comment line format.
	const std::regex commentFormat("^\\s*#", std::regex_constants::icase);

	// CVAR string format.
	const std::regex cvarFormat("^\\s*([a-zA-Z_]+)\\s+([\\d.]+)\\s*&", std::regex_constants::icase);

	std::string line;
	std::smatch matches;

	while(std::getline(cfgFile, line))
	{
		// If comment, ignore.
		std::regex_match(line, matches, commentFormat);
		if(matches.size())
			continue;

		// If CVAR, assign value.
		std::regex_match(line, matches, cvarFormat);

		// There should be three matches. One for the string and two for the
		// submatches (CVAR name and value).
		if(matches.size() != 3)
		{

		}

		// CVAR seems good. Attempt to apply it. Up to the CVAR whether or not
		// this happens.
		std::string_view
			name	= matches[1].str().c_str(),
			value	= matches[2].str().c_str();

		(*console::systemCVARs[name]) = value;
	}

	cfgFile.close();
}

/**
 * Saves configuration file.
 */

void CFGFile::save()
{
	cfgFile.open(cfgFilePath.string(), std::ios::out);
	if(!cfgFile.is_open())
	{
		printf("NO CFG FILE TO SAVE!");
		return;
	}

	cfgFile << "# Configuration file ''\n# Do not edit this file!\n";

	for(auto &[name, cv] : console::systemCVARs)
		cfgFile << "\n" << name << " " << cv->value;

	cfgFile.close();
}

/**
 * Console commands.
 */

/**
 * Loads a configuration file.
 */

void loadCFGFile()
{
	CFGFile file("test.cfg");
	file.load();
}

void saveCFGFile()
{
	CFGFile file("test.cfg");
	file.save();
}

/**
 * Initializes configuration system.
 * Loads the main configuration file.
 */

const uint8_t init()
{
	console::CCMDs.insert
	(
		{
			{ "cfg_load", loadCFGFile },
			{ "cfg_save", saveCFGFile }
		}
	);

	return 0;
}

/**
 * Shuts down configuration system.
 * Attempts to save default configuration file.
 */

void quit()
{
	// Create config file directory if it does not exist. If we can't, it's an error;
	// no file will be saved.
	if(!cfgDirectory.exists())
	{
		if(!std::filesystem::create_directory(cfgDirPath))
		{
			return;
		}
	}

	// Save configuration file.
}

} // namespace configuration

} // namespace coreLib
